# -*- coding: utf-8 -*-
"""sklearn.datasets.make_circles with pytorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IEX6zL5GocqJHP0GOeVqZKczBvXGE3Ws

Neural Network Binary Classification:

*  Data Loading: Here I used make circle datasets
* Used pandas DataFrame to check feature data and output label
* Data Visualization using Matplotlib
* Convert datatype into tensor. Using torch.form_numpy(x).type(torch.float)
* Split the data into train and test
* Create a MakeCircleModel class with linear layer and using ReLu()
* Train Model:
	Loss Function,
	Optimizer (Tried Different lr values 0.1 and 0.01),
	Accuracy function,
	Training Loop.
* Plot the data
"""

import torch
import sklearn

"""#Data Input"""

from sklearn.datasets import make_circles 
# https://scikit-learn.org/stable/modules/generated/sklearn.datasets.make_circles.html

n_samples=1000
TRY_NOISE=0.03 #check diff options
X,y= make_circles(n_samples, noise=TRY_NOISE, random_state=33)

len(X), len(y)

X[:5],y[:5]

"""So data are in numpy array!
Now make a dataframe to understand the data more!
"""

import pandas as pd

circles=pd.DataFrame({"Feature Data 1": X[:,0],
                      "Feature Data 2": X[:,1],
                      "Output Label":y})
circles

circles.head(10)

"""#Data Visualization"""

import matplotlib.pyplot as plt

plt.scatter(x=X[:,0],
            y=X[:,1],
            c=y,
            cmap="RdYlBu");

"""#Convert input types to tensor"""

X.shape, y.shape

X.dtype, y.dtype

type(X), type(y)

X=torch.from_numpy(X).type(torch.float)
y=torch.from_numpy(y).type(torch.float)

X.dtype , y.dtype

type(X), type(y)

X[:5],y[:5]

"""Coverted data from numpy arra to tensor

#Split the Data
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.2, random_state=33)

len(X_train), len(X_test), len(y_train), len(y_test)

"""#Build The Model"""

# Making a device agnostic code

device="cude" if torch.cuda.is_available() else "cpu"
device

from torch import nn

class MakeCircleModel(nn.Module):
  def __init__(self):
    super().__init__()

    self.layer_1=nn.Linear(in_features=2, out_features=10)
    self.layer_2=nn.Linear(in_features=10, out_features=10)
    self.layer_3=nn.Linear(in_features=10, out_features=1)
    self.relu= nn.ReLU()

  def forward(self,x):
    return self.layer_3(self.relu(self.layer_2(self.relu(self.layer_1(x)))))

model_f= MakeCircleModel().to(device)
print(model_f)

"""#Train Model"""

#creat Loss Function --->>>>>> optimizer  ------>>>>> Accuracy Function

loss_fn = nn.BCEWithLogitsLoss()

optimizer= torch.optim.SGD(model_f.parameters(), lr=0.01)

def accuracy_fn(y_true, y_preds):

  total_correct=torch.eq(y_true, y_preds).sum().item()
  acc=(total_correct/len(y_preds))*100
  return acc

torch.manual_seed(33)
epochs=1000

#put all data on target device

X_train, y_train = X_train.to(device), y_train.to(device)
X_test, y_test = X_test.to(device), y_test.to(device)

# --------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Train the model <<<<<<<<<<<<<---------

for epoch in range(epochs):

  y_logits=model_f(X_train).squeeze()
  y_pred= torch.round(torch.sigmoid(y_logits))

  loss=loss_fn(y_logits, y_train)
  
  acc= accuracy_fn(y_true = y_train,
                   y_preds = y_pred)
  
  optimizer.zero_grad()

  loss.backward()

  optimizer.step()

#--------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Testing <<<<<<<<<<<<<<<<<<<<<------------ 

  model_f.eval()
  
  with torch.inference_mode():

    test_logits = model_f(X_test).squeeze()
    test_pred=torch.round(torch.sigmoid(test_logits))

    test_loss=loss_fn(test_logits, y_test)

    test_acc= accuracy_fn(y_true = y_test,
                          y_preds=test_pred)
    
#--------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Ending <<<<<<<<<<<<<<<<<<<<<------------ 

  if epoch % 100==0:
    print(f"Epoch: {epoch} | Loss: {loss:.5f}, Accuracy: {acc:.2f}% | Test Loss: {test_loss:.5f}, Test Accuracy: {test_acc:.2f}%")

""" * 1st time with lr=0.1 I got Test Accuracy: 81.00%  
 * with lr=0.01 I got Test Accuracy: 96.00%

 Happy KIDDO!
"""

#without test logits

model_f.eval()
with torch.inference_mode():
    y_preds = torch.round(torch.sigmoid(model_f(X_test))).squeeze()
y_preds[:10], y[:10]

print(f"Predictions: {y_preds[:10]}\nLabels: {y_test[:10]}")
print(f"Test accuracy: {accuracy_fn(y_true=y_test, y_pred=y_preds)}%")

import numpy as np
def plot_decision_boundary(model: torch.nn.Module, X: torch.Tensor, y: torch.Tensor):
    """Plots decision boundaries of model predicting on X in comparison to y.
    Source - https://madewithml.com/courses/foundations/neural-networks/ (with modifications)
    """
    # Put everything to CPU (works better with NumPy + Matplotlib)
    model.to("cpu")
    X, y = X.to("cpu"), y.to("cpu")

    # Setup prediction boundaries and grid
    x_min, x_max = X[:, 0].min() - 0.1, X[:, 0].max() + 0.1
    y_min, y_max = X[:, 1].min() - 0.1, X[:, 1].max() + 0.1
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 101), np.linspace(y_min, y_max, 101))

    # Make features
    X_to_pred_on = torch.from_numpy(np.column_stack((xx.ravel(), yy.ravel()))).float()

    # Make predictions
    model.eval()
    with torch.inference_mode():
        y_logits = model(X_to_pred_on)

    # Test for multi-class or binary and adjust logits to prediction labels
    if len(torch.unique(y)) > 2:
        y_pred = torch.softmax(y_logits, dim=1).argmax(dim=1)  # mutli-class
    else:
        y_pred = torch.round(torch.sigmoid(y_logits))  # binary

    # Reshape preds and plot
    y_pred = y_pred.reshape(xx.shape).detach().numpy()
    plt.contourf(xx, yy, y_pred, cmap=plt.cm.RdYlBu, alpha=0.7)
    plt.scatter(X[:, 0], X[:, 1], c=y, s=40, cmap=plt.cm.RdYlBu)
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())

    def plot_predictions(train_data, train_labels, test_data, test_labels, predictions=None):
  # """
  # Plots linear training data and test data and compares predictions.
  # """
      plt.figure(figsize=(10, 7))

      # Plot training data in blue
      plt.scatter(train_data, train_labels, c="b", s=4, label="Training data")

      # Plot test data in green
      plt.scatter(test_data, test_labels, c="g", s=4, label="Testing data")

      if predictions is not None:
          # Plot the predictions in red (predictions were made on the test data)
          plt.scatter(test_data, predictions, c="r", s=4, label="Predictions")

      # Show the legend
      plt.legend(prop={"size": 14})

plot_decision_boundary(model_f, X_test, y_test)

